<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en">
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />

    <meta http-equiv="cache-control" content="max-age=0" />
    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
    <meta http-equiv="pragma" content="no-cache" />

    <meta charset="utf-8" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <meta http-equiv="Content-Language" content="en" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />

    <script charset="utf-8" src="./Scripts/EasyAjax.js"></script>
    <script charset="utf-8" src="./Scripts/SimpleError.js"></script>


    <!--
    <meta name="author" content="name" />
    <meta name="description" content="description here" />
    <meta name="keywords" content="keywords,here" />

    <link rel="shortcut icon" href="favicon.ico" type="image/vnd.microsoft.icon" />
    <link rel="stylesheet" href="stylesheet.css" type="text/css" />
    -->

    <title>Title</title>

    <style type="text/css" media="all">

        body
        {
            background-color: #0c70b4;
            color: #546775;
            font: normal 400 18px "PT Sans", sans-serif;
            -webkit-font-smoothing: antialiased;
        }

    </style>


    <script type="text/javascript">

        // Returns a random integer between min (included) and max (excluded)
        // Using Math.round() will give you a non-uniform distribution!
        function rand(min, max)
        {
            min = Math.ceil(min);
            max = Math.floor(max);
            return Math.floor(Math.random() * (max - min)) + min;
        }


        function eToString(ex)
        {
            var r = "";
            for (var key in ex)
            {
                if (ex.hasOwnProperty(key) && key != "toString")
                {
                    r += r !== "" ? "\n" : "";
                    r += key + "=" + ex[key];
                }
            }

            return r;
        }


        function printStackTrace()
        {
            var callstack = [];
            var isCallstackPopulated = false;
            try
            {
                i.dont.exist += 0; //doesn't exist- that's the point
            }
            catch (e)
            {
                console.log(e);
            }

            
            console.log("args:", arguments);

            if (!isCallstackPopulated)
            { //IE and Safari
                var currentFunction = arguments.callee.caller;
                while (currentFunction)
                {
                    var fn = currentFunction.toString();
                    var fname = fn.substring(fn.indexOf("function") + 8, fn.indexOf('')) || 'anonymous';
                    callstack.push(fname);
                    currentFunction = currentFunction.caller;
                }
            }
            
            // console.log(callstack.join('\n\n'));
            console.log(callstack);
        }



        function LogError(e)
        {
            console.clear();

            var onFail = function (r)
            {
                console.log("fail");
            }

            var onSuccess = function (r)
            {
                // r = JSON.parse(r);
                // SIBE.Populate(r.data);
                console.log(r);
            };

            var postData = { };

            function addKeyPair(key, value)
            {
                try
                {
                    if (value)
                        postData[key] = value;
                }
                catch (ex) { }
            }

            addKeyPair("msg", e.error.message);
            addKeyPair("name", e.error.name);

            addKeyPair("referrer", document.referrer);
            addKeyPair("href", window.location.href);
            addKeyPair("filename", e.filename);
            addKeyPair("lineNumber", e.lineno);
            addKeyPair("columnNumber", e.colno);
            addKeyPair("stack", e.error.stack);
            addKeyPair("description", e.error.description);
            

            console.log("postData");
            console.log(postData);

            //.always(cbAlways)
            // new Http.Post("./ajax/jsErrorLog.ashx", postData).success(onSuccess).failure(onFail).send();

            //.always(cbAlways)
            new Http.Json("./ajax/jsErrorLog.ashx", postData).success(onSuccess).failure(onFail).send();
        }


        window.addEventListener("error", function (e)
        {
            console.log("Entering Error Listener");
            console.log("args", arguments);

            // console.log("filename: ", e.filename);
            // console.log("lineno: ", e.lineno);
            // console.log("colno: ", e.colno);

            // console.log("error", e.error);
            // console.log("message: ", e.error.message);
            // console.log("name: ", e.error.name);
            // console.log("stack: ", e.error.stack);

            LogError(e);

            // https://stackoverflow.com/questions/8087240/if-i-override-window-onerror-in-javascript-should-i-return-true-or-false
            // e.preventDefault();
            return false;
        });

    </script>

</head>
<body>

    <script type="text/javascript">

        /*
        window.onerror = function myErrorHandler(errorMsg, url, lineNumber)
        {
            console.log("Error occured: " + errorMsg);//or any message
            console.log(arguments)

            errorMsg.preventDefault = true

            // https://stackoverflow.com/questions/8087240/if-i-override-window-onerror-in-javascript-should-i-return-true-or-false
            return false;
        }
        */
        

        function testme(obj)
        {
            var a = obj + "hello";
            i.dont.exist += 0; //doesn't exist- that's the point

            try
            {
                // window["foo"]();
                // i.dont.exist += 0; //doesn't exist- that's the point
            }
            catch (e)
            {
                // console.log(e)
                // console.log(eToString(e))

                //// ALL
                // Error.prototype.message
                // Error.prototype.name


                //// MS
                // Error.prototype.description
                // Error.prototype.number


                // Error.prototype.fileName
                // Error.prototype.lineNumber
                // Error.prototype.columnNumber
                // Error.prototype.stack
                // Error.prototype.toSource()
                // Error.prototype.toString()
                // console.log(StackTrace.toString(e));
            }

            return a;
        }


        function autorun()
        {
            // console.log("ar")
            // console.clear();
            // printStackTrace();
            // testme("more");
            // LogError();
            // printStackTrace("foobar");

        }

        if (document.addEventListener) document.addEventListener("DOMContentLoaded", autorun, false);
        else if (document.attachEvent) document.attachEvent("onreadystatechange", autorun);
        else window.onload = autorun;
        
    </script>

</body>
</html>
